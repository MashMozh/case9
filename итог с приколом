import turtle
import math
import time
import webcolors


print('===Гексагональный арт-генератор ===\n')


# === Ввод количества гексагонов ===
def get_num_hexagons() -> int:
    """Функция для ввода количества шестиугольников с валидацией"""
    while True:
        try:
            quantity = int(input('Введите количество шестиугольников в ряду (от 4 до 20): '))
            if 4 <= quantity <= 20:
                return quantity
            else:
                print('Число должно быть от 4 до 20.')
        except ValueError:
            print('Введите корректное число.')


# === Проверка и ввод пользовательского цвета ===
def get_valid_color_from_user() -> str:
    """Позволяет ввести свой цвет (HEX или английское имя)"""
    while True:
        user_input = input("Введите свой цвет (HEX или английское название): ").strip().lower()
        if user_input.startswith('#'):
            if len(user_input) in (4, 7):
                return user_input
            else:
                print("Ошибка: неправильный формат HEX. Пример: #ff0000 или #f00")
        else:
            try:
                webcolors.name_to_hex(user_input)
                return user_input
            except ValueError:
                print("Ошибка: неизвестное название цвета. Попробуйте снова.")


# === Меню выбора цветов ===
def get_color_choice():
    """Позволяет выбрать два цвета — из меню или ввести свои"""
    print('Доступные цвета:\n')

    available_colors_1 = [
        ('\U0001F48B Красный', 'red'),
        ('\U0001F499 Синий', 'blue'),
        ('\U0001F49A Зелёный', 'green'),
        ('\U0001F49B Жёлтый', 'yellow'),
        ('\U0001F49C Фиолетовый', 'purple'),
        ('\U0001F4A6 Голубой', 'cyan')
    ]

    available_colors_2 = [
        ('\U0001F5A4 Чёрный', 'black'),
        ('\U0001F47D Серый', 'gray'),
        ('\U0001F495 Розовый', 'pink'),
        ('\U0001F9E1 Оранжевый', 'orange'),
        ('\U0001F90E Коричневый', 'brown'),
        ('\U0001F916 Свой цвет (HEX/английское имя)', None)
    ]

    max_width = max(len(c[0]) for c in available_colors_1) + 3

    for i, (col1, col2) in enumerate(zip(available_colors_1, available_colors_2), start=1):
        left_num = i
        right_num = i + len(available_colors_1)
        print(f"{left_num:>2}. {col1[0]:<{max_width}} {right_num:>2}. {col2[0]}")

    def choose_color(num_prompt: str) -> str:
        while True:
            try:
                num = int(input(num_prompt))
                if 1 <= num <= 12:
                    if num <= 6:
                        return available_colors_1[num - 1][1]
                    elif num < 12:
                        return available_colors_2[num - 7][1]
                    else:
                        return get_valid_color_from_user()
                else:
                    print("Номер должен быть от 1 до 12.")
            except ValueError:
                print("Введите число от 1 до 12.")

    first_color = choose_color("\nВведите номер первого цвета (1–12): ")
    second_color = choose_color("Введите номер второго цвета (1–12): ")

    return first_color, second_color


# === Предпросмотр выбранных цветов ===
def preview_colors(color1: str, color2: str):
    """Показывает предпросмотр выбранных цветов"""
    turtle.clearscreen()
    turtle.hideturtle()
    turtle.speed(0)
    turtle.bgcolor("white")

    def draw_square(x, y, color, label):
        turtle.penup()
        turtle.goto(x, y)
        turtle.pendown()
        turtle.fillcolor(color)
        turtle.begin_fill()
        for _ in range(4):
            turtle.forward(120)
            turtle.right(90)
        turtle.end_fill()
        turtle.penup()
        turtle.goto(x + 60, y - 30)
        turtle.color("black")
        turtle.write(label, align="center", font=("Arial", 14, "normal"))

    draw_square(-160, 50, color1, f"Цвет 1: {color1}")
    draw_square(80, 50, color2, f"Цвет 2: {color2}")

    turtle.penup()
    turtle.goto(0, -120)
    turtle.color("black")
    turtle.write("Нажмите Enter в консоли, чтобы начать рисование",
                 align="center", font=("Arial", 14, "italic"))

    input("\nНажмите Enter, чтобы начать рисование...")


# === Рисование гексагона с тенями и границами ===
def draw_hexagon(x: float, y: float, side_len: float, color: str):
    """Рисует гексагон с тенями"""
    # Тень
    turtle.penup()
    turtle.goto(x + 3, y - 3)
    turtle.pendown()
    turtle.fillcolor("#a0a0a0")
    turtle.begin_fill()
    turtle.setheading(30)
    for _ in range(6):
        turtle.forward(side_len)
        turtle.right(60)
    turtle.end_fill()

    # Основная фигура
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    turtle.fillcolor(color)
    turtle.begin_fill()
    turtle.setheading(30)
    for _ in range(6):
        turtle.forward(side_len)
        turtle.right(60)
    turtle.end_fill()
    turtle.setheading(0)


def draw_hexagon_border(x: float, y: float, side_len: float):
    """Граница вокруг гексагона"""
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    turtle.pencolor("black")
    turtle.pensize(2)
    turtle.setheading(30)
    for _ in range(6):
        turtle.forward(side_len)
        turtle.right(60)
    turtle.pensize(1)
    turtle.setheading(0)


def animate_drawing(centers: list, colors: list, side: float):
    """Анимированное рисование узора"""
    turtle.tracer(0, 0)
    for (x, y), color in zip(centers, colors):
        draw_hexagon(x, y, side, color)
        draw_hexagon_border(x, y, side)
        turtle.update()
        time.sleep(0.04)
    turtle.tracer(1, 10)


# === Главная функция ===
def main():
    turtle.setup(900, 900)
    turtle.speed(0)
    turtle.hideturtle()
    turtle.bgcolor("#f8f8ff")

    N = get_num_hexagons()
    color_first, color_second = get_color_choice()

    preview_colors(color_first, color_second)

    size = 500
    side_length = size / (N * 1.5)
    diagonal = math.sqrt(3) * side_length

    start_x_0 = -diagonal * N / 2
    start_y_0 = side_length * (N / 2)

    centers, colors = [], []
    for row in range(N):
        y_offset = start_y_0 - row * side_length * 1.5
        x_offset = start_x_0 + (diagonal / 2 if row % 2 else 0)
        color = color_first if row % 2 == 0 else color_second
        for col in range(N):
            x = x_offset + col * diagonal
            centers.append((x, y_offset))
            colors.append(color)

    animate_drawing(centers, colors, side_length)

    turtle.penup()
    turtle.goto(0, -size / 2 - 30)
    turtle.color("black")
    turtle.done()


if __name__== "__main__":
    main()
