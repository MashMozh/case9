import turtle
import math
import time
import webcolors

# ======== Меню выбора цвета с эмодзи ========
available_colors_1 = [
    ('\U0001F48B Красный', 'red'),
    ('\U0001F499 Синий', 'blue'),
    ('\U0001F49A Зелёный', 'green'),
    ('\U0001F49B Жёлтый', 'yellow'),
    ('\U0001F49C Фиолетовый', 'purple'),
    ('\U0001F4A6 Голубой', 'cyan')
]

available_colors_2 = [
    ('\U0001F5A4 Чёрный', 'black'),
    ('\U0001F47D Серый', 'gray'),
    ('\U0001F495 Розовый', 'pink'),
    ('\U0001F9E1 Оранжевый', 'orange'),
    ('\U0001F90E Коричневый', 'brown'),
    ('\U0001F916 Свой цвет (HEX/английское имя)', None)
]

# ======== Цвета для границы ========
color_map = {
    'красный':'red','оранжевый':'orange','желтый':'yellow','зеленый':'green',
    'синий':'blue','фиолетовый':'purple','розовый':'pink','черный':'black',
    'серый':'gray','белый':'white','коричневый':'brown'
}

def translate_color(color_rus):
    return color_map.get(color_rus.lower(), 'black')

# ======== Ввод собственного цвета ========
def get_valid_color_from_user(prompt: str) -> str:
    while True:
        user_input = input(prompt).strip().lower()
        if user_input.startswith('#'):
            if len(user_input) in (4, 7):
                return user_input
            else:
                print("Ошибка: неправильный формат HEX. Пример #ff0000 или #f00")
        else:
            try:
                webcolors.name_to_hex(user_input)
                return user_input
            except ValueError:
                print("Ошибка: неизвестное название цвета. Попробуйте снова.")

# ======== Выбор двух цветов ========
def get_color_choice():
    print("Доступные цвета:\n")
    max_width = max(len(c[0]) for c in available_colors_1) + 3
    for i, (c1, c2) in enumerate(zip(available_colors_1, available_colors_2), start=1):
        left_num = i
        right_num = i + len(available_colors_1)
        print(f"{left_num:>2}. {c1[0]:<{max_width}} {right_num:>2}. {c2[0]}")

    def choose_color(prompt: str) -> str:
        while True:
            try:
                num = int(input(prompt))
                if 1 <= num <= 12:
                    if num <= 6:
                        return available_colors_1[num-1][1]
                    elif num < 12:
                        return available_colors_2[num-7][1]
                    else:
                        return get_valid_color_from_user("Введите цвет (HEX или английское имя): ")
                else:
                    print("Номер должен быть от 1 до 12")
            except ValueError:
                print("Введите число от 1 до 12")

    first = choose_color("Введите номер первого цвета (1–12): ")
    second = choose_color("Введите номер второго цвета (1–12): ")
    return first, second

# ======== Настройки границы и тени ========
def border_thickness():
    options = {'тонкий':1, 'средний':3, 'толстый':5}
    print("Толщина границы: тонкий, средний, толстый")
    while True:
        choice = input("Выберите толщину границы: ").strip().lower()
        if choice in options: return options[choice]
        print("Ошибка ввода")

def border_color():
    options = ['красный','оранжевый','желтый','зеленый','синий','фиолетовый',
               'розовый','черный','серый','белый']
    print("Цвет границы: " + ", ".join(options))
    while True:
        choice = input("Выберите цвет границы: ").strip().lower()
        if choice in options: return translate_color(choice)
        print("Ошибка ввода")

def shadow_brightness():
    options = {'нет':0, 'слабый':5, 'средний':8, 'сильный':12}
    print("Интенсивность тени: нет, слабый, средний, сильный")
    while True:
        choice = input("Выберите интенсивность тени: ").strip().lower()
        if choice in options: return options[choice]
        print("Ошибка ввода")

# ======== Количество шестиугольников ========
def get_num_hexagons():
    while True:
        val = input("Введите количество шестиугольников в ряду (4-20): ").strip()
        if val.isdigit() and 4 <= int(val) <= 20:
            return int(val)
        print("Ошибка: введите число от 4 до 20.")


# ======== Вычисление координат ========
def calculate_side_length(number, size):
    return size/(number+0.5)

def calculate_hexagon_centers(number, size):
    side = calculate_side_length(number, size)
    width_hex = math.sqrt(3) * side
    total_width = width_hex * number
    total_height = side * 1.5 * number
    start_x = -total_width / 2 + width_hex / 2
    start_y = total_height / 2 - side / 2
    centers = []
    for row in range(number):
        y = start_y - row * side * 1.5
        for col in range(number):
            x = start_x + col * width_hex
            if row % 2 == 1: x += width_hex / 2
            centers.append((x, y))
    return centers, side

# ======== Предпросмотр выбранных цветов ========
def preview_colors(color1, color2):
    turtle.clearscreen()
    turtle.hideturtle()
    turtle.speed(0)
    turtle.bgcolor("white")

    def draw_square(x, y, color, label):
        turtle.penup()
        turtle.goto(x, y)
        turtle.pendown()
        turtle.fillcolor(color)
        turtle.begin_fill()
        for _ in range(4):
            turtle.forward(100)
            turtle.right(90)
        turtle.end_fill()
        turtle.penup()
        turtle.goto(x + 50, y - 30)
        turtle.color("black")
        turtle.write(label, align="center", font=("Arial", 14, "normal"))

    draw_square(-150, 50, color1, f"Цвет 1: {color1}")
    draw_square(50, 50, color2, f"Цвет 2: {color2}")
    turtle.penup()
    turtle.goto(0, -100)
    turtle.write("Нажмите Enter в консоли, чтобы начать рисование",
                 align="center", font=("Arial", 14, "italic"))
    input("\nНажмите Enter, чтобы начать рисование...")

# ======== Рисование шестиугольников ========
def draw_shadow(x, y, side, shadow_intensity):
    if shadow_intensity == 0: return
    shadow_x = x + shadow_intensity
    shadow_y = y - shadow_intensity
    turtle.penup()
    turtle.goto(shadow_x, shadow_y)
    turtle.pendown()
    turtle.fillcolor("#686868")
    turtle.begin_fill()
    turtle.setheading(30)
    for _ in range(6):
        turtle.forward(side)
        turtle.right(60)
    turtle.end_fill()
    turtle.setheading(0)

def draw_hexagon(x, y, side, color):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    turtle.fillcolor(color)
    turtle.begin_fill()
    turtle.setheading(30)
    for _ in range(6):
        turtle.forward(side)
        turtle.right(60)
    turtle.end_fill()
    turtle.setheading(0)

def draw_hexagon_border(x, y, side, thickness, color):
    turtle.penup()
    turtle.goto(x, y)
    turtle.pendown()
    turtle.pencolor(color)
    turtle.pensize(thickness)
    turtle.setheading(30)
    for _ in range(6):
        turtle.forward(side)
        turtle.right(60)
    turtle.setheading(0)
    turtle.pensize(1)

def animate_drawing(centers, colors, side, thickness, color_bord, shadow_intensity):
    turtle.tracer(0, 0)
    for i, (x, y) in enumerate(centers):
        color = colors[i]
        if shadow_intensity > 0: draw_shadow(x, y, side, shadow_intensity)
        draw_hexagon(x, y, side, color)
        draw_hexagon_border(x, y, side, thickness, color_bord)
        turtle.update()
        time.sleep(0.05)
    turtle.tracer(1, 10)

# ======== Главная функция ========
def main():
    turtle.setup(800, 800)
    turtle.speed(0)
    turtle.hideturtle()
    turtle.bgcolor("white")

    N = get_num_hexagons()
    color1, color2 = get_color_choice()
    preview_colors(color1, color2)
    thickness = border_thickness()
    color_bord = border_color()
    shadow_intensity = shadow_brightness()
    size = 500

    centers, side = calculate_hexagon_centers(N, size)
    colors = []
    for row in range(N):
        for col in range(N):
            colors.append(color1 if row % 2 == 0 else color2)

    animate_drawing(centers, colors, side, thickness, color_bord, shadow_intensity)
    turtle.done()

if __name__== "__main__":
    main()
